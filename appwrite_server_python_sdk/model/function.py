# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class Function(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Function
    """


    class MetaOapg:
        required = {
            "providerRootDirectory",
            "$createdAt",
            "runtime",
            "execute",
            "providerBranch",
            "version",
            "enabled",
            "timeout",
            "$updatedAt",
            "providerRepositoryId",
            "schedule",
            "entrypoint",
            "providerSilentMode",
            "name",
            "logging",
            "installationId",
            "vars",
            "commands",
            "events",
            "live",
            "$id",
            "deployment",
        }
        
        class properties:
            version = schemas.StrSchema
            id = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
        
            @staticmethod
            def execute() -> typing.Type['FunctionExecute']:
                return FunctionExecute
            name = schemas.StrSchema
            enabled = schemas.BoolSchema
            live = schemas.BoolSchema
            logging = schemas.BoolSchema
            runtime = schemas.StrSchema
            deployment = schemas.StrSchema
            
            
            class vars(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Variable']:
                        return Variable
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Variable'], typing.List['Variable']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vars':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Variable':
                    return super().__getitem__(i)
        
            @staticmethod
            def events() -> typing.Type['FunctionEvents']:
                return FunctionEvents
            schedule = schemas.StrSchema
            timeout = schemas.Int32Schema
            entrypoint = schemas.StrSchema
            commands = schemas.StrSchema
            installationId = schemas.StrSchema
            providerRepositoryId = schemas.StrSchema
            providerBranch = schemas.StrSchema
            providerRootDirectory = schemas.StrSchema
            providerSilentMode = schemas.BoolSchema
            __annotations__ = {
                "version": version,
                "$id": id,
                "$createdAt": created_at,
                "$updatedAt": updated_at,
                "execute": execute,
                "name": name,
                "enabled": enabled,
                "live": live,
                "logging": logging,
                "runtime": runtime,
                "deployment": deployment,
                "vars": vars,
                "events": events,
                "schedule": schedule,
                "timeout": timeout,
                "entrypoint": entrypoint,
                "commands": commands,
                "installationId": installationId,
                "providerRepositoryId": providerRepositoryId,
                "providerBranch": providerBranch,
                "providerRootDirectory": providerRootDirectory,
                "providerSilentMode": providerSilentMode,
            }
    
    providerRootDirectory: MetaOapg.properties.providerRootDirectory
    runtime: MetaOapg.properties.runtime
    execute: 'FunctionExecute'
    providerBranch: MetaOapg.properties.providerBranch
    version: MetaOapg.properties.version
    enabled: MetaOapg.properties.enabled
    timeout: MetaOapg.properties.timeout
    providerRepositoryId: MetaOapg.properties.providerRepositoryId
    schedule: MetaOapg.properties.schedule
    entrypoint: MetaOapg.properties.entrypoint
    providerSilentMode: MetaOapg.properties.providerSilentMode
    name: MetaOapg.properties.name
    logging: MetaOapg.properties.logging
    installationId: MetaOapg.properties.installationId
    vars: MetaOapg.properties.vars
    commands: MetaOapg.properties.commands
    events: 'FunctionEvents'
    live: MetaOapg.properties.live
    deployment: MetaOapg.properties.deployment
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["execute"]) -> 'FunctionExecute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["live"]) -> MetaOapg.properties.live: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logging"]) -> MetaOapg.properties.logging: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runtime"]) -> MetaOapg.properties.runtime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deployment"]) -> MetaOapg.properties.deployment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vars"]) -> MetaOapg.properties.vars: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> 'FunctionEvents': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule"]) -> MetaOapg.properties.schedule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeout"]) -> MetaOapg.properties.timeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entrypoint"]) -> MetaOapg.properties.entrypoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commands"]) -> MetaOapg.properties.commands: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["installationId"]) -> MetaOapg.properties.installationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerRepositoryId"]) -> MetaOapg.properties.providerRepositoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerBranch"]) -> MetaOapg.properties.providerBranch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerRootDirectory"]) -> MetaOapg.properties.providerRootDirectory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerSilentMode"]) -> MetaOapg.properties.providerSilentMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "$id", "$createdAt", "$updatedAt", "execute", "name", "enabled", "live", "logging", "runtime", "deployment", "vars", "events", "schedule", "timeout", "entrypoint", "commands", "installationId", "providerRepositoryId", "providerBranch", "providerRootDirectory", "providerSilentMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["execute"]) -> 'FunctionExecute': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["live"]) -> MetaOapg.properties.live: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logging"]) -> MetaOapg.properties.logging: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runtime"]) -> MetaOapg.properties.runtime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deployment"]) -> MetaOapg.properties.deployment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vars"]) -> MetaOapg.properties.vars: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> 'FunctionEvents': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule"]) -> MetaOapg.properties.schedule: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeout"]) -> MetaOapg.properties.timeout: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entrypoint"]) -> MetaOapg.properties.entrypoint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commands"]) -> MetaOapg.properties.commands: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["installationId"]) -> MetaOapg.properties.installationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerRepositoryId"]) -> MetaOapg.properties.providerRepositoryId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerBranch"]) -> MetaOapg.properties.providerBranch: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerRootDirectory"]) -> MetaOapg.properties.providerRootDirectory: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerSilentMode"]) -> MetaOapg.properties.providerSilentMode: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "$id", "$createdAt", "$updatedAt", "execute", "name", "enabled", "live", "logging", "runtime", "deployment", "vars", "events", "schedule", "timeout", "entrypoint", "commands", "installationId", "providerRepositoryId", "providerBranch", "providerRootDirectory", "providerSilentMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        providerRootDirectory: typing.Union[MetaOapg.properties.providerRootDirectory, str, ],
        runtime: typing.Union[MetaOapg.properties.runtime, str, ],
        execute: 'FunctionExecute',
        providerBranch: typing.Union[MetaOapg.properties.providerBranch, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, ],
        timeout: typing.Union[MetaOapg.properties.timeout, decimal.Decimal, int, ],
        providerRepositoryId: typing.Union[MetaOapg.properties.providerRepositoryId, str, ],
        schedule: typing.Union[MetaOapg.properties.schedule, str, ],
        entrypoint: typing.Union[MetaOapg.properties.entrypoint, str, ],
        providerSilentMode: typing.Union[MetaOapg.properties.providerSilentMode, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        logging: typing.Union[MetaOapg.properties.logging, bool, ],
        installationId: typing.Union[MetaOapg.properties.installationId, str, ],
        vars: typing.Union[MetaOapg.properties.vars, list, tuple, ],
        commands: typing.Union[MetaOapg.properties.commands, str, ],
        events: 'FunctionEvents',
        live: typing.Union[MetaOapg.properties.live, bool, ],
        deployment: typing.Union[MetaOapg.properties.deployment, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Function':
        return super().__new__(
            cls,
            *args,
            providerRootDirectory=providerRootDirectory,
            runtime=runtime,
            execute=execute,
            providerBranch=providerBranch,
            version=version,
            enabled=enabled,
            timeout=timeout,
            providerRepositoryId=providerRepositoryId,
            schedule=schedule,
            entrypoint=entrypoint,
            providerSilentMode=providerSilentMode,
            name=name,
            logging=logging,
            installationId=installationId,
            vars=vars,
            commands=commands,
            events=events,
            live=live,
            deployment=deployment,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_server_python_sdk.model.function_events import FunctionEvents
from appwrite_server_python_sdk.model.function_execute import FunctionExecute
from appwrite_server_python_sdk.model.variable import Variable
