# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class MessagingCreateSmsMessageRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "messageId",
            "content",
        }
        
        class properties:
            messageId = schemas.StrSchema
            content = schemas.StrSchema
        
            @staticmethod
            def topics() -> typing.Type['MessagingCreateSmsMessageRequestTopics']:
                return MessagingCreateSmsMessageRequestTopics
        
            @staticmethod
            def users() -> typing.Type['MessagingCreateSmsMessageRequestUsers']:
                return MessagingCreateSmsMessageRequestUsers
        
            @staticmethod
            def targets() -> typing.Type['MessagingCreateSmsMessageRequestTargets']:
                return MessagingCreateSmsMessageRequestTargets
            draft = schemas.BoolSchema
            scheduledAt = schemas.StrSchema
            __annotations__ = {
                "messageId": messageId,
                "content": content,
                "topics": topics,
                "users": users,
                "targets": targets,
                "draft": draft,
                "scheduledAt": scheduledAt,
            }
    
    messageId: MetaOapg.properties.messageId
    content: MetaOapg.properties.content
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messageId"]) -> MetaOapg.properties.messageId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topics"]) -> 'MessagingCreateSmsMessageRequestTopics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> 'MessagingCreateSmsMessageRequestUsers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targets"]) -> 'MessagingCreateSmsMessageRequestTargets': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draft"]) -> MetaOapg.properties.draft: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduledAt"]) -> MetaOapg.properties.scheduledAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["messageId", "content", "topics", "users", "targets", "draft", "scheduledAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messageId"]) -> MetaOapg.properties.messageId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topics"]) -> typing.Union['MessagingCreateSmsMessageRequestTopics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union['MessagingCreateSmsMessageRequestUsers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targets"]) -> typing.Union['MessagingCreateSmsMessageRequestTargets', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draft"]) -> typing.Union[MetaOapg.properties.draft, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduledAt"]) -> typing.Union[MetaOapg.properties.scheduledAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["messageId", "content", "topics", "users", "targets", "draft", "scheduledAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        messageId: typing.Union[MetaOapg.properties.messageId, str, ],
        content: typing.Union[MetaOapg.properties.content, str, ],
        topics: typing.Union['MessagingCreateSmsMessageRequestTopics', schemas.Unset] = schemas.unset,
        users: typing.Union['MessagingCreateSmsMessageRequestUsers', schemas.Unset] = schemas.unset,
        targets: typing.Union['MessagingCreateSmsMessageRequestTargets', schemas.Unset] = schemas.unset,
        draft: typing.Union[MetaOapg.properties.draft, bool, schemas.Unset] = schemas.unset,
        scheduledAt: typing.Union[MetaOapg.properties.scheduledAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MessagingCreateSmsMessageRequest':
        return super().__new__(
            cls,
            *args,
            messageId=messageId,
            content=content,
            topics=topics,
            users=users,
            targets=targets,
            draft=draft,
            scheduledAt=scheduledAt,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_server_python_sdk.model.messaging_create_sms_message_request_targets import MessagingCreateSmsMessageRequestTargets
from appwrite_server_python_sdk.model.messaging_create_sms_message_request_topics import MessagingCreateSmsMessageRequestTopics
from appwrite_server_python_sdk.model.messaging_create_sms_message_request_users import MessagingCreateSmsMessageRequestUsers
