# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class Membership(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Membership
    """


    class MetaOapg:
        required = {
            "teamName",
            "joined",
            "roles",
            "invited",
            "$createdAt",
            "mfa",
            "userName",
            "userId",
            "$updatedAt",
            "confirm",
            "teamId",
            "userEmail",
            "$id",
        }
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            userId = schemas.StrSchema
            userName = schemas.StrSchema
            userEmail = schemas.StrSchema
            teamId = schemas.StrSchema
            teamName = schemas.StrSchema
            invited = schemas.StrSchema
            joined = schemas.StrSchema
            confirm = schemas.BoolSchema
            mfa = schemas.BoolSchema
        
            @staticmethod
            def roles() -> typing.Type['MembershipRoles']:
                return MembershipRoles
            __annotations__ = {
                "$id": id,
                "$createdAt": created_at,
                "$updatedAt": updated_at,
                "userId": userId,
                "userName": userName,
                "userEmail": userEmail,
                "teamId": teamId,
                "teamName": teamName,
                "invited": invited,
                "joined": joined,
                "confirm": confirm,
                "mfa": mfa,
                "roles": roles,
            }
    
    teamName: MetaOapg.properties.teamName
    joined: MetaOapg.properties.joined
    roles: 'MembershipRoles'
    invited: MetaOapg.properties.invited
    mfa: MetaOapg.properties.mfa
    userName: MetaOapg.properties.userName
    userId: MetaOapg.properties.userId
    confirm: MetaOapg.properties.confirm
    teamId: MetaOapg.properties.teamId
    userEmail: MetaOapg.properties.userEmail
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userEmail"]) -> MetaOapg.properties.userEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teamId"]) -> MetaOapg.properties.teamId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teamName"]) -> MetaOapg.properties.teamName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invited"]) -> MetaOapg.properties.invited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["joined"]) -> MetaOapg.properties.joined: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirm"]) -> MetaOapg.properties.confirm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mfa"]) -> MetaOapg.properties.mfa: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> 'MembershipRoles': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "userId", "userName", "userEmail", "teamId", "teamName", "invited", "joined", "confirm", "mfa", "roles", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userEmail"]) -> MetaOapg.properties.userEmail: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teamId"]) -> MetaOapg.properties.teamId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teamName"]) -> MetaOapg.properties.teamName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invited"]) -> MetaOapg.properties.invited: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["joined"]) -> MetaOapg.properties.joined: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirm"]) -> MetaOapg.properties.confirm: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mfa"]) -> MetaOapg.properties.mfa: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> 'MembershipRoles': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "userId", "userName", "userEmail", "teamId", "teamName", "invited", "joined", "confirm", "mfa", "roles", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        teamName: typing.Union[MetaOapg.properties.teamName, str, ],
        joined: typing.Union[MetaOapg.properties.joined, str, ],
        roles: 'MembershipRoles',
        invited: typing.Union[MetaOapg.properties.invited, str, ],
        mfa: typing.Union[MetaOapg.properties.mfa, bool, ],
        userName: typing.Union[MetaOapg.properties.userName, str, ],
        userId: typing.Union[MetaOapg.properties.userId, str, ],
        confirm: typing.Union[MetaOapg.properties.confirm, bool, ],
        teamId: typing.Union[MetaOapg.properties.teamId, str, ],
        userEmail: typing.Union[MetaOapg.properties.userEmail, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Membership':
        return super().__new__(
            cls,
            *args,
            teamName=teamName,
            joined=joined,
            roles=roles,
            invited=invited,
            mfa=mfa,
            userName=userName,
            userId=userId,
            confirm=confirm,
            teamId=teamId,
            userEmail=userEmail,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_server_python_sdk.model.membership_roles import MembershipRoles
