# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class UsersCreateScryptModifiedUserRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "password",
            "passwordSaltSeparator",
            "passwordSalt",
            "userId",
            "email",
            "passwordSignerKey",
        }
        
        class properties:
            userId = schemas.StrSchema
            email = schemas.StrSchema
            password = schemas.StrSchema
            passwordSalt = schemas.StrSchema
            passwordSaltSeparator = schemas.StrSchema
            passwordSignerKey = schemas.StrSchema
            name = schemas.StrSchema
            __annotations__ = {
                "userId": userId,
                "email": email,
                "password": password,
                "passwordSalt": passwordSalt,
                "passwordSaltSeparator": passwordSaltSeparator,
                "passwordSignerKey": passwordSignerKey,
                "name": name,
            }
    
    password: MetaOapg.properties.password
    passwordSaltSeparator: MetaOapg.properties.passwordSaltSeparator
    passwordSalt: MetaOapg.properties.passwordSalt
    userId: MetaOapg.properties.userId
    email: MetaOapg.properties.email
    passwordSignerKey: MetaOapg.properties.passwordSignerKey
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passwordSalt"]) -> MetaOapg.properties.passwordSalt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passwordSaltSeparator"]) -> MetaOapg.properties.passwordSaltSeparator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passwordSignerKey"]) -> MetaOapg.properties.passwordSignerKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["userId", "email", "password", "passwordSalt", "passwordSaltSeparator", "passwordSignerKey", "name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passwordSalt"]) -> MetaOapg.properties.passwordSalt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passwordSaltSeparator"]) -> MetaOapg.properties.passwordSaltSeparator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passwordSignerKey"]) -> MetaOapg.properties.passwordSignerKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["userId", "email", "password", "passwordSalt", "passwordSaltSeparator", "passwordSignerKey", "name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        password: typing.Union[MetaOapg.properties.password, str, ],
        passwordSaltSeparator: typing.Union[MetaOapg.properties.passwordSaltSeparator, str, ],
        passwordSalt: typing.Union[MetaOapg.properties.passwordSalt, str, ],
        userId: typing.Union[MetaOapg.properties.userId, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        passwordSignerKey: typing.Union[MetaOapg.properties.passwordSignerKey, str, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsersCreateScryptModifiedUserRequest':
        return super().__new__(
            cls,
            *args,
            password=password,
            passwordSaltSeparator=passwordSaltSeparator,
            passwordSalt=passwordSalt,
            userId=userId,
            email=email,
            passwordSignerKey=passwordSignerKey,
            name=name,
            _configuration=_configuration,
            **kwargs,
        )
