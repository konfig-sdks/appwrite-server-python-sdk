# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class DatabasesCreateRelationshipAttributeRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "relatedCollectionId",
            "type",
        }
        
        class properties:
            relatedCollectionId = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ONE_TO_ONE(cls):
                    return cls("oneToOne")
                
                @schemas.classproperty
                def MANY_TO_ONE(cls):
                    return cls("manyToOne")
                
                @schemas.classproperty
                def MANY_TO_MANY(cls):
                    return cls("manyToMany")
                
                @schemas.classproperty
                def ONE_TO_MANY(cls):
                    return cls("oneToMany")
            twoWay = schemas.BoolSchema
            key = schemas.StrSchema
            twoWayKey = schemas.StrSchema
            
            
            class onDelete(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CASCADE(cls):
                    return cls("cascade")
                
                @schemas.classproperty
                def RESTRICT(cls):
                    return cls("restrict")
                
                @schemas.classproperty
                def SET_NULL(cls):
                    return cls("setNull")
            __annotations__ = {
                "relatedCollectionId": relatedCollectionId,
                "type": type,
                "twoWay": twoWay,
                "key": key,
                "twoWayKey": twoWayKey,
                "onDelete": onDelete,
            }
    
    relatedCollectionId: MetaOapg.properties.relatedCollectionId
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedCollectionId"]) -> MetaOapg.properties.relatedCollectionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twoWay"]) -> MetaOapg.properties.twoWay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twoWayKey"]) -> MetaOapg.properties.twoWayKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onDelete"]) -> MetaOapg.properties.onDelete: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["relatedCollectionId", "type", "twoWay", "key", "twoWayKey", "onDelete", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedCollectionId"]) -> MetaOapg.properties.relatedCollectionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twoWay"]) -> typing.Union[MetaOapg.properties.twoWay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twoWayKey"]) -> typing.Union[MetaOapg.properties.twoWayKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onDelete"]) -> typing.Union[MetaOapg.properties.onDelete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relatedCollectionId", "type", "twoWay", "key", "twoWayKey", "onDelete", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        relatedCollectionId: typing.Union[MetaOapg.properties.relatedCollectionId, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        twoWay: typing.Union[MetaOapg.properties.twoWay, bool, schemas.Unset] = schemas.unset,
        key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
        twoWayKey: typing.Union[MetaOapg.properties.twoWayKey, str, schemas.Unset] = schemas.unset,
        onDelete: typing.Union[MetaOapg.properties.onDelete, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DatabasesCreateRelationshipAttributeRequest':
        return super().__new__(
            cls,
            *args,
            relatedCollectionId=relatedCollectionId,
            type=type,
            twoWay=twoWay,
            key=key,
            twoWayKey=twoWayKey,
            onDelete=onDelete,
            _configuration=_configuration,
            **kwargs,
        )
