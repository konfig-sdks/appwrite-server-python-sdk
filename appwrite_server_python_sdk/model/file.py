# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class File(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    File
    """


    class MetaOapg:
        required = {
            "chunksTotal",
            "signature",
            "sizeOriginal",
            "name",
            "$createdAt",
            "bucketId",
            "mimeType",
            "$permissions",
            "chunksUploaded",
            "$id",
            "$updatedAt",
        }
        
        class properties:
            id = schemas.StrSchema
            bucketId = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
        
            @staticmethod
            def permissions() -> typing.Type['Filepermissions']:
                return Filepermissions
            name = schemas.StrSchema
            signature = schemas.StrSchema
            mimeType = schemas.StrSchema
            sizeOriginal = schemas.Int32Schema
            chunksTotal = schemas.Int32Schema
            chunksUploaded = schemas.Int32Schema
            __annotations__ = {
                "$id": id,
                "bucketId": bucketId,
                "$createdAt": created_at,
                "$updatedAt": updated_at,
                "$permissions": permissions,
                "name": name,
                "signature": signature,
                "mimeType": mimeType,
                "sizeOriginal": sizeOriginal,
                "chunksTotal": chunksTotal,
                "chunksUploaded": chunksUploaded,
            }
    
    chunksTotal: MetaOapg.properties.chunksTotal
    signature: MetaOapg.properties.signature
    sizeOriginal: MetaOapg.properties.sizeOriginal
    name: MetaOapg.properties.name
    bucketId: MetaOapg.properties.bucketId
    mimeType: MetaOapg.properties.mimeType
    chunksUploaded: MetaOapg.properties.chunksUploaded
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bucketId"]) -> MetaOapg.properties.bucketId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$permissions"]) -> 'Filepermissions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mimeType"]) -> MetaOapg.properties.mimeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sizeOriginal"]) -> MetaOapg.properties.sizeOriginal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chunksTotal"]) -> MetaOapg.properties.chunksTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chunksUploaded"]) -> MetaOapg.properties.chunksUploaded: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["$id", "bucketId", "$createdAt", "$updatedAt", "$permissions", "name", "signature", "mimeType", "sizeOriginal", "chunksTotal", "chunksUploaded", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bucketId"]) -> MetaOapg.properties.bucketId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$permissions"]) -> 'Filepermissions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mimeType"]) -> MetaOapg.properties.mimeType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sizeOriginal"]) -> MetaOapg.properties.sizeOriginal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chunksTotal"]) -> MetaOapg.properties.chunksTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chunksUploaded"]) -> MetaOapg.properties.chunksUploaded: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$id", "bucketId", "$createdAt", "$updatedAt", "$permissions", "name", "signature", "mimeType", "sizeOriginal", "chunksTotal", "chunksUploaded", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        chunksTotal: typing.Union[MetaOapg.properties.chunksTotal, decimal.Decimal, int, ],
        signature: typing.Union[MetaOapg.properties.signature, str, ],
        sizeOriginal: typing.Union[MetaOapg.properties.sizeOriginal, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        bucketId: typing.Union[MetaOapg.properties.bucketId, str, ],
        mimeType: typing.Union[MetaOapg.properties.mimeType, str, ],
        chunksUploaded: typing.Union[MetaOapg.properties.chunksUploaded, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'File':
        return super().__new__(
            cls,
            *args,
            chunksTotal=chunksTotal,
            signature=signature,
            sizeOriginal=sizeOriginal,
            name=name,
            bucketId=bucketId,
            mimeType=mimeType,
            chunksUploaded=chunksUploaded,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_server_python_sdk.model.filepermissions import Filepermissions
