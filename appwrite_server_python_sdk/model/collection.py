# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class Collection(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Collection
    """


    class MetaOapg:
        required = {
            "indexes",
            "name",
            "$createdAt",
            "attributes",
            "documentSecurity",
            "databaseId",
            "$permissions",
            "enabled",
            "$id",
            "$updatedAt",
        }
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
        
            @staticmethod
            def permissions() -> typing.Type['Collectionpermissions']:
                return Collectionpermissions
            databaseId = schemas.StrSchema
            name = schemas.StrSchema
            enabled = schemas.BoolSchema
            documentSecurity = schemas.BoolSchema
        
            @staticmethod
            def attributes() -> typing.Type['CollectionAttributes']:
                return CollectionAttributes
            
            
            class indexes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Index']:
                        return Index
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Index'], typing.List['Index']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'indexes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Index':
                    return super().__getitem__(i)
            __annotations__ = {
                "$id": id,
                "$createdAt": created_at,
                "$updatedAt": updated_at,
                "$permissions": permissions,
                "databaseId": databaseId,
                "name": name,
                "enabled": enabled,
                "documentSecurity": documentSecurity,
                "attributes": attributes,
                "indexes": indexes,
            }
    
    indexes: MetaOapg.properties.indexes
    name: MetaOapg.properties.name
    attributes: 'CollectionAttributes'
    documentSecurity: MetaOapg.properties.documentSecurity
    databaseId: MetaOapg.properties.databaseId
    enabled: MetaOapg.properties.enabled
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$permissions"]) -> 'Collectionpermissions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["databaseId"]) -> MetaOapg.properties.databaseId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentSecurity"]) -> MetaOapg.properties.documentSecurity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'CollectionAttributes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["indexes"]) -> MetaOapg.properties.indexes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "$permissions", "databaseId", "name", "enabled", "documentSecurity", "attributes", "indexes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$permissions"]) -> 'Collectionpermissions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["databaseId"]) -> MetaOapg.properties.databaseId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentSecurity"]) -> MetaOapg.properties.documentSecurity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> 'CollectionAttributes': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["indexes"]) -> MetaOapg.properties.indexes: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "$permissions", "databaseId", "name", "enabled", "documentSecurity", "attributes", "indexes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        indexes: typing.Union[MetaOapg.properties.indexes, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        attributes: 'CollectionAttributes',
        documentSecurity: typing.Union[MetaOapg.properties.documentSecurity, bool, ],
        databaseId: typing.Union[MetaOapg.properties.databaseId, str, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Collection':
        return super().__new__(
            cls,
            *args,
            indexes=indexes,
            name=name,
            attributes=attributes,
            documentSecurity=documentSecurity,
            databaseId=databaseId,
            enabled=enabled,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_server_python_sdk.model.collection_attributes import CollectionAttributes
from appwrite_server_python_sdk.model.collectionpermissions import Collectionpermissions
from appwrite_server_python_sdk.model.index import Index
