# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class User(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    User
    """


    class MetaOapg:
        required = {
            "accessedAt",
            "emailVerification",
            "passwordUpdate",
            "$createdAt",
            "mfa",
            "phoneVerification",
            "targets",
            "$updatedAt",
            "labels",
            "prefs",
            "phone",
            "name",
            "registration",
            "email",
            "$id",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            name = schemas.StrSchema
            registration = schemas.StrSchema
            status = schemas.BoolSchema
        
            @staticmethod
            def labels() -> typing.Type['UserLabels']:
                return UserLabels
            passwordUpdate = schemas.StrSchema
            email = schemas.StrSchema
            phone = schemas.StrSchema
            emailVerification = schemas.BoolSchema
            phoneVerification = schemas.BoolSchema
            mfa = schemas.BoolSchema
        
            @staticmethod
            def prefs() -> typing.Type['UserPrefs']:
                return UserPrefs
            
            
            class targets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Target']:
                        return Target
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Target'], typing.List['Target']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targets':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Target':
                    return super().__getitem__(i)
            accessedAt = schemas.StrSchema
            
            
            class password(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'password':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class hash(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hash':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def hashOptions() -> typing.Type['UserHashOptions']:
                return UserHashOptions
            __annotations__ = {
                "$id": id,
                "$createdAt": created_at,
                "$updatedAt": updated_at,
                "name": name,
                "registration": registration,
                "status": status,
                "labels": labels,
                "passwordUpdate": passwordUpdate,
                "email": email,
                "phone": phone,
                "emailVerification": emailVerification,
                "phoneVerification": phoneVerification,
                "mfa": mfa,
                "prefs": prefs,
                "targets": targets,
                "accessedAt": accessedAt,
                "password": password,
                "hash": hash,
                "hashOptions": hashOptions,
            }
    
    accessedAt: MetaOapg.properties.accessedAt
    emailVerification: MetaOapg.properties.emailVerification
    passwordUpdate: MetaOapg.properties.passwordUpdate
    mfa: MetaOapg.properties.mfa
    phoneVerification: MetaOapg.properties.phoneVerification
    targets: MetaOapg.properties.targets
    labels: 'UserLabels'
    prefs: 'UserPrefs'
    phone: MetaOapg.properties.phone
    name: MetaOapg.properties.name
    registration: MetaOapg.properties.registration
    email: MetaOapg.properties.email
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registration"]) -> MetaOapg.properties.registration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> 'UserLabels': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passwordUpdate"]) -> MetaOapg.properties.passwordUpdate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailVerification"]) -> MetaOapg.properties.emailVerification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneVerification"]) -> MetaOapg.properties.phoneVerification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mfa"]) -> MetaOapg.properties.mfa: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs"]) -> 'UserPrefs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targets"]) -> MetaOapg.properties.targets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessedAt"]) -> MetaOapg.properties.accessedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hash"]) -> MetaOapg.properties.hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hashOptions"]) -> 'UserHashOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "name", "registration", "status", "labels", "passwordUpdate", "email", "phone", "emailVerification", "phoneVerification", "mfa", "prefs", "targets", "accessedAt", "password", "hash", "hashOptions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registration"]) -> MetaOapg.properties.registration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> 'UserLabels': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passwordUpdate"]) -> MetaOapg.properties.passwordUpdate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailVerification"]) -> MetaOapg.properties.emailVerification: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneVerification"]) -> MetaOapg.properties.phoneVerification: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mfa"]) -> MetaOapg.properties.mfa: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs"]) -> 'UserPrefs': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targets"]) -> MetaOapg.properties.targets: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessedAt"]) -> MetaOapg.properties.accessedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hash"]) -> typing.Union[MetaOapg.properties.hash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hashOptions"]) -> typing.Union['UserHashOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "name", "registration", "status", "labels", "passwordUpdate", "email", "phone", "emailVerification", "phoneVerification", "mfa", "prefs", "targets", "accessedAt", "password", "hash", "hashOptions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accessedAt: typing.Union[MetaOapg.properties.accessedAt, str, ],
        emailVerification: typing.Union[MetaOapg.properties.emailVerification, bool, ],
        passwordUpdate: typing.Union[MetaOapg.properties.passwordUpdate, str, ],
        mfa: typing.Union[MetaOapg.properties.mfa, bool, ],
        phoneVerification: typing.Union[MetaOapg.properties.phoneVerification, bool, ],
        targets: typing.Union[MetaOapg.properties.targets, list, tuple, ],
        labels: 'UserLabels',
        prefs: 'UserPrefs',
        phone: typing.Union[MetaOapg.properties.phone, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        registration: typing.Union[MetaOapg.properties.registration, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        status: typing.Union[MetaOapg.properties.status, bool, ],
        password: typing.Union[MetaOapg.properties.password, None, str, schemas.Unset] = schemas.unset,
        hash: typing.Union[MetaOapg.properties.hash, None, str, schemas.Unset] = schemas.unset,
        hashOptions: typing.Union['UserHashOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'User':
        return super().__new__(
            cls,
            *args,
            accessedAt=accessedAt,
            emailVerification=emailVerification,
            passwordUpdate=passwordUpdate,
            mfa=mfa,
            phoneVerification=phoneVerification,
            targets=targets,
            labels=labels,
            prefs=prefs,
            phone=phone,
            name=name,
            registration=registration,
            email=email,
            status=status,
            password=password,
            hash=hash,
            hashOptions=hashOptions,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_server_python_sdk.model.target import Target
from appwrite_server_python_sdk.model.user_hash_options import UserHashOptions
from appwrite_server_python_sdk.model.user_labels import UserLabels
from appwrite_server_python_sdk.model.user_prefs import UserPrefs
