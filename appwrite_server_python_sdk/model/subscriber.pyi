# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class Subscriber(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Subscriber
    """


    class MetaOapg:
        required = {
            "topicId",
            "targetId",
            "$createdAt",
            "userName",
            "userId",
            "providerType",
            "$id",
            "$updatedAt",
            "target",
        }
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            targetId = schemas.StrSchema
        
            @staticmethod
            def target() -> typing.Type['SubscriberTarget']:
                return SubscriberTarget
            userId = schemas.StrSchema
            userName = schemas.StrSchema
            topicId = schemas.StrSchema
            providerType = schemas.StrSchema
            __annotations__ = {
                "$id": id,
                "$createdAt": created_at,
                "$updatedAt": updated_at,
                "targetId": targetId,
                "target": target,
                "userId": userId,
                "userName": userName,
                "topicId": topicId,
                "providerType": providerType,
            }
    
    topicId: MetaOapg.properties.topicId
    targetId: MetaOapg.properties.targetId
    userName: MetaOapg.properties.userName
    userId: MetaOapg.properties.userId
    providerType: MetaOapg.properties.providerType
    target: 'SubscriberTarget'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetId"]) -> MetaOapg.properties.targetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target"]) -> 'SubscriberTarget': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topicId"]) -> MetaOapg.properties.topicId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerType"]) -> MetaOapg.properties.providerType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "targetId", "target", "userId", "userName", "topicId", "providerType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetId"]) -> MetaOapg.properties.targetId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target"]) -> 'SubscriberTarget': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topicId"]) -> MetaOapg.properties.topicId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerType"]) -> MetaOapg.properties.providerType: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "targetId", "target", "userId", "userName", "topicId", "providerType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        topicId: typing.Union[MetaOapg.properties.topicId, str, ],
        targetId: typing.Union[MetaOapg.properties.targetId, str, ],
        userName: typing.Union[MetaOapg.properties.userName, str, ],
        userId: typing.Union[MetaOapg.properties.userId, str, ],
        providerType: typing.Union[MetaOapg.properties.providerType, str, ],
        target: 'SubscriberTarget',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Subscriber':
        return super().__new__(
            cls,
            *args,
            topicId=topicId,
            targetId=targetId,
            userName=userName,
            userId=userId,
            providerType=providerType,
            target=target,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_server_python_sdk.model.subscriber_target import SubscriberTarget
