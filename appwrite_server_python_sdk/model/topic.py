# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class Topic(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Topic
    """


    class MetaOapg:
        required = {
            "emailTotal",
            "smsTotal",
            "subscribe",
            "name",
            "pushTotal",
            "$createdAt",
            "$id",
            "$updatedAt",
        }
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            name = schemas.StrSchema
            emailTotal = schemas.Int32Schema
            smsTotal = schemas.Int32Schema
            pushTotal = schemas.Int32Schema
        
            @staticmethod
            def subscribe() -> typing.Type['TopicSubscribe']:
                return TopicSubscribe
            __annotations__ = {
                "$id": id,
                "$createdAt": created_at,
                "$updatedAt": updated_at,
                "name": name,
                "emailTotal": emailTotal,
                "smsTotal": smsTotal,
                "pushTotal": pushTotal,
                "subscribe": subscribe,
            }
    
    emailTotal: MetaOapg.properties.emailTotal
    smsTotal: MetaOapg.properties.smsTotal
    subscribe: 'TopicSubscribe'
    name: MetaOapg.properties.name
    pushTotal: MetaOapg.properties.pushTotal
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailTotal"]) -> MetaOapg.properties.emailTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smsTotal"]) -> MetaOapg.properties.smsTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pushTotal"]) -> MetaOapg.properties.pushTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscribe"]) -> 'TopicSubscribe': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "name", "emailTotal", "smsTotal", "pushTotal", "subscribe", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailTotal"]) -> MetaOapg.properties.emailTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smsTotal"]) -> MetaOapg.properties.smsTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pushTotal"]) -> MetaOapg.properties.pushTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscribe"]) -> 'TopicSubscribe': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "name", "emailTotal", "smsTotal", "pushTotal", "subscribe", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        emailTotal: typing.Union[MetaOapg.properties.emailTotal, decimal.Decimal, int, ],
        smsTotal: typing.Union[MetaOapg.properties.smsTotal, decimal.Decimal, int, ],
        subscribe: 'TopicSubscribe',
        name: typing.Union[MetaOapg.properties.name, str, ],
        pushTotal: typing.Union[MetaOapg.properties.pushTotal, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Topic':
        return super().__new__(
            cls,
            *args,
            emailTotal=emailTotal,
            smsTotal=smsTotal,
            subscribe=subscribe,
            name=name,
            pushTotal=pushTotal,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_server_python_sdk.model.topic_subscribe import TopicSubscribe
