# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class MessagingUpdateProviderByIdRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            host = schemas.StrSchema
            port = schemas.IntSchema
            username = schemas.StrSchema
            password = schemas.StrSchema
            
            
            class encryption(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "none": "NONE",
                        "ssl": "SSL",
                        "tls": "TLS",
                    }
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("none")
                
                @schemas.classproperty
                def SSL(cls):
                    return cls("ssl")
                
                @schemas.classproperty
                def TLS(cls):
                    return cls("tls")
            autoTLS = schemas.BoolSchema
            mailer = schemas.StrSchema
            fromName = schemas.StrSchema
            fromEmail = schemas.StrSchema
            replyToName = schemas.StrSchema
            replyToEmail = schemas.StrSchema
            enabled = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "host": host,
                "port": port,
                "username": username,
                "password": password,
                "encryption": encryption,
                "autoTLS": autoTLS,
                "mailer": mailer,
                "fromName": fromName,
                "fromEmail": fromEmail,
                "replyToName": replyToName,
                "replyToEmail": replyToEmail,
                "enabled": enabled,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryption"]) -> MetaOapg.properties.encryption: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoTLS"]) -> MetaOapg.properties.autoTLS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mailer"]) -> MetaOapg.properties.mailer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromName"]) -> MetaOapg.properties.fromName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromEmail"]) -> MetaOapg.properties.fromEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replyToName"]) -> MetaOapg.properties.replyToName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replyToEmail"]) -> MetaOapg.properties.replyToEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "host", "port", "username", "password", "encryption", "autoTLS", "mailer", "fromName", "fromEmail", "replyToName", "replyToEmail", "enabled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host"]) -> typing.Union[MetaOapg.properties.host, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> typing.Union[MetaOapg.properties.port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryption"]) -> typing.Union[MetaOapg.properties.encryption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoTLS"]) -> typing.Union[MetaOapg.properties.autoTLS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mailer"]) -> typing.Union[MetaOapg.properties.mailer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromName"]) -> typing.Union[MetaOapg.properties.fromName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromEmail"]) -> typing.Union[MetaOapg.properties.fromEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replyToName"]) -> typing.Union[MetaOapg.properties.replyToName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replyToEmail"]) -> typing.Union[MetaOapg.properties.replyToEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "host", "port", "username", "password", "encryption", "autoTLS", "mailer", "fromName", "fromEmail", "replyToName", "replyToEmail", "enabled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        host: typing.Union[MetaOapg.properties.host, str, schemas.Unset] = schemas.unset,
        port: typing.Union[MetaOapg.properties.port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        encryption: typing.Union[MetaOapg.properties.encryption, str, schemas.Unset] = schemas.unset,
        autoTLS: typing.Union[MetaOapg.properties.autoTLS, bool, schemas.Unset] = schemas.unset,
        mailer: typing.Union[MetaOapg.properties.mailer, str, schemas.Unset] = schemas.unset,
        fromName: typing.Union[MetaOapg.properties.fromName, str, schemas.Unset] = schemas.unset,
        fromEmail: typing.Union[MetaOapg.properties.fromEmail, str, schemas.Unset] = schemas.unset,
        replyToName: typing.Union[MetaOapg.properties.replyToName, str, schemas.Unset] = schemas.unset,
        replyToEmail: typing.Union[MetaOapg.properties.replyToEmail, str, schemas.Unset] = schemas.unset,
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MessagingUpdateProviderByIdRequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            host=host,
            port=port,
            username=username,
            password=password,
            encryption=encryption,
            autoTLS=autoTLS,
            mailer=mailer,
            fromName=fromName,
            fromEmail=fromEmail,
            replyToName=replyToName,
            replyToEmail=replyToEmail,
            enabled=enabled,
            _configuration=_configuration,
            **kwargs,
        )
