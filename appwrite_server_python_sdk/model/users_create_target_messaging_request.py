# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class UsersCreateTargetMessagingRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "identifier",
            "targetId",
            "providerType",
        }
        
        class properties:
            targetId = schemas.StrSchema
            
            
            class providerType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "email": "EMAIL",
                        "sms": "SMS",
                        "push": "PUSH",
                    }
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("email")
                
                @schemas.classproperty
                def SMS(cls):
                    return cls("sms")
                
                @schemas.classproperty
                def PUSH(cls):
                    return cls("push")
            identifier = schemas.StrSchema
            providerId = schemas.StrSchema
            name = schemas.StrSchema
            __annotations__ = {
                "targetId": targetId,
                "providerType": providerType,
                "identifier": identifier,
                "providerId": providerId,
                "name": name,
            }
    
    identifier: MetaOapg.properties.identifier
    targetId: MetaOapg.properties.targetId
    providerType: MetaOapg.properties.providerType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetId"]) -> MetaOapg.properties.targetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerType"]) -> MetaOapg.properties.providerType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerId"]) -> MetaOapg.properties.providerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["targetId", "providerType", "identifier", "providerId", "name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetId"]) -> MetaOapg.properties.targetId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerType"]) -> MetaOapg.properties.providerType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerId"]) -> typing.Union[MetaOapg.properties.providerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["targetId", "providerType", "identifier", "providerId", "name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        identifier: typing.Union[MetaOapg.properties.identifier, str, ],
        targetId: typing.Union[MetaOapg.properties.targetId, str, ],
        providerType: typing.Union[MetaOapg.properties.providerType, str, ],
        providerId: typing.Union[MetaOapg.properties.providerId, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsersCreateTargetMessagingRequest':
        return super().__new__(
            cls,
            *args,
            identifier=identifier,
            targetId=targetId,
            providerType=providerType,
            providerId=providerId,
            name=name,
            _configuration=_configuration,
            **kwargs,
        )
