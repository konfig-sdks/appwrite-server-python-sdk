# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_server_python_sdk import schemas  # noqa: F401


class Message(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Message
    """


    class MetaOapg:
        required = {
            "deliveredTotal",
            "data",
            "topics",
            "$createdAt",
            "targets",
            "providerType",
            "users",
            "$id",
            "$updatedAt",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            providerType = schemas.StrSchema
        
            @staticmethod
            def topics() -> typing.Type['MessageTopics']:
                return MessageTopics
        
            @staticmethod
            def users() -> typing.Type['MessageUsers']:
                return MessageUsers
        
            @staticmethod
            def targets() -> typing.Type['MessageTargets']:
                return MessageTargets
            deliveredTotal = schemas.Int32Schema
            data = schemas.DictSchema
            status = schemas.StrSchema
            
            
            class scheduledAt(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scheduledAt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class deliveredAt(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deliveredAt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def deliveryErrors() -> typing.Type['MessageDeliveryErrors']:
                return MessageDeliveryErrors
            __annotations__ = {
                "$id": id,
                "$createdAt": created_at,
                "$updatedAt": updated_at,
                "providerType": providerType,
                "topics": topics,
                "users": users,
                "targets": targets,
                "deliveredTotal": deliveredTotal,
                "data": data,
                "status": status,
                "scheduledAt": scheduledAt,
                "deliveredAt": deliveredAt,
                "deliveryErrors": deliveryErrors,
            }
    
    deliveredTotal: MetaOapg.properties.deliveredTotal
    data: MetaOapg.properties.data
    topics: 'MessageTopics'
    targets: 'MessageTargets'
    providerType: MetaOapg.properties.providerType
    users: 'MessageUsers'
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerType"]) -> MetaOapg.properties.providerType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topics"]) -> 'MessageTopics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> 'MessageUsers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targets"]) -> 'MessageTargets': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deliveredTotal"]) -> MetaOapg.properties.deliveredTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduledAt"]) -> MetaOapg.properties.scheduledAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deliveredAt"]) -> MetaOapg.properties.deliveredAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deliveryErrors"]) -> 'MessageDeliveryErrors': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "providerType", "topics", "users", "targets", "deliveredTotal", "data", "status", "scheduledAt", "deliveredAt", "deliveryErrors", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerType"]) -> MetaOapg.properties.providerType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topics"]) -> 'MessageTopics': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> 'MessageUsers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targets"]) -> 'MessageTargets': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deliveredTotal"]) -> MetaOapg.properties.deliveredTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduledAt"]) -> typing.Union[MetaOapg.properties.scheduledAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deliveredAt"]) -> typing.Union[MetaOapg.properties.deliveredAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deliveryErrors"]) -> typing.Union['MessageDeliveryErrors', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "providerType", "topics", "users", "targets", "deliveredTotal", "data", "status", "scheduledAt", "deliveredAt", "deliveryErrors", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        deliveredTotal: typing.Union[MetaOapg.properties.deliveredTotal, decimal.Decimal, int, ],
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, ],
        topics: 'MessageTopics',
        targets: 'MessageTargets',
        providerType: typing.Union[MetaOapg.properties.providerType, str, ],
        users: 'MessageUsers',
        status: typing.Union[MetaOapg.properties.status, str, ],
        scheduledAt: typing.Union[MetaOapg.properties.scheduledAt, None, str, schemas.Unset] = schemas.unset,
        deliveredAt: typing.Union[MetaOapg.properties.deliveredAt, None, str, schemas.Unset] = schemas.unset,
        deliveryErrors: typing.Union['MessageDeliveryErrors', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Message':
        return super().__new__(
            cls,
            *args,
            deliveredTotal=deliveredTotal,
            data=data,
            topics=topics,
            targets=targets,
            providerType=providerType,
            users=users,
            status=status,
            scheduledAt=scheduledAt,
            deliveredAt=deliveredAt,
            deliveryErrors=deliveryErrors,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_server_python_sdk.model.message_delivery_errors import MessageDeliveryErrors
from appwrite_server_python_sdk.model.message_targets import MessageTargets
from appwrite_server_python_sdk.model.message_topics import MessageTopics
from appwrite_server_python_sdk.model.message_users import MessageUsers
